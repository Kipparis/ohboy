tmux:{
  --b4 all commands <C-b>--
  
  pane {
    % open pane horizontally
    " open pane vertically
    ; move to previous active pane
    o next pane in the current window
    x kill current pane

    { swap current pane with the previous pane
    } swap current pane with the next pane

    {arrows} change to the pane above/below, to the left/right

    {C-arrows} resize the current pane
  }

  window {
    c create new window
    [0..9] select window
    l move to previously selected window
    n change to the next window
    f search for text in open windows

    & kill the current window
  }

  $ kill the current session
}

code {
  scoccount <directoryname> -- count lines in direcoty
}

i3 {
  mod + enter - open terminal
  mod + sh + q - kill active
  mod + F2 - browser
  mod + d - top menu
  mod + sh + b - back menu
  mod + z - top programm menu
  mod + 1-9 - go to workspace
  mod + ct + 1-9 - send to workspace

  mod + 0 - exit
  mod + sh + h - help

  mod + m - hide status bar

  how to know which class? 
  > xprop 
}

vim {
  C+o - go to previous position - helpful when got to definition or something else
  C+i - got to newer position
  G   - end of file
  gg  - start of file

  :so % - source current file

  n - search forward
  N - search backward

  /ignore\c - ignore case for that search

  :set xxx - sets the option "xxx"

  C+w + C+w - move btw windows

  v - visual mode
  C+v - block visual mode
  V - select lines

  :verbose imap <Tab> -- see which plugin is overriding your map
  gx - open link under cursor

  help {
    next read - :help user-manual
    book - Vim - Vi IMproved - by Steve Oulline
    how to build vimrc - :help virc-intro
  }

  pluggins {
    snippets {
      :UltiSnipsEdit - edit snippets for this particular filetype
      :tabedit ~/.vim/Ultisnips/all.snippets 
      :tab h UltiSni<tab>
      # - comment
    }

    vim-fugitive {
      :G :Gstatus - git status
      :Gedit - view any blob, tree, commit, or tag (:Gsplit, :Gvsplit,
                                                    :Gtbedit)
      :Gdiffsplit - bring up the staged vesion of the file side by side
        with the working tree version and use Vim's diff handling
        capabilities to stage a subset of the file's changes
      )
      :Gcommit
      :Gmerge
      :Grebase
      :Gpush
      :Gfetch
      :Gpull
      :Gblame
      :Gmove 
      :Gdelete
      :Ggrep - search the work tree (or any arbitrary commit)
      :Glog - loads all previous revisions of a file into the quickfix
        list
      :Gread == git checkout -- filename that operates on the buffer 
      :Gwrite == git add when called from work tree file and
              == git checkout when caled from the index or blob in hist

      :Git for running any arbitrary command
      :Git! to pen the output of a command in a temp file

      g? - list of mappings
    }

    vim-gitgutter {
      [c,]c - move between hunks
      <leader>hp - preview
      <leader>hs - stage
      <leader>hu - undo

      ic - operates on all lines in the current hunk
      ac - --//-- and trailing empty lines

      zr - to unfold 3 lines above and below a hunk
      or GitGutterFold

      :GitGutterLineHighlightsToggle - toggle line highligning
      
      g:gitgutter_preview_win_location - location of the preview window
    }

    gv.vim {
      :GV - open commit browser
        pass git log oprions to the command, e.g. :GV -S foobar
      :GV! - only list commits that affected the current file
      :GV? - fills the locations list with the revisions of the current
              file
      :GV or :GV? used in visual mode to track the changes in the
              selected lines

      o - on commit to display content
      o - on commits to display the diff in the range
      O - opens a new tab instead
      gv == :Gbrowse
      ]], [[ to move between commits
      . - start command-line with :Git [CURSOR] SHA a la fugitive
      q - close
    }

    vimagit {
      :Magit - opens magit
      C+n - jump to next hunk
      S - stage or unstage hunk 
      CC - commit; then in normal mode "cc" or ":w"
    }

    Nerd Tree {
      <F2> focus on nerd tree
      <C-w-w> focus on vim
      gt next tab
      gT previous tab
      m  - add child
    }

    tcomment {
      :gc comment
      :g<
      :g>
    }

    make buffer region {
      :NR
    }

    allign {
      [v,ga]ip[ga,][number of occurences]<symbol>[start]
        Visual select Inner Paragraph => start easyalign command (ga)
        Start UasyAlign command (ga) for Inner Paragraph
    }
  }
}


mappings {
  gc or gcc (for line)
  ga<symbol> - allign by symbol
  C+d - go to definition

  C+t - open tree
  S+t - open file in new tab

  C+p - search for something
}

* add comething here

git {
  git add [--patch,-p] <filename> -- add only part of specified filename
}
